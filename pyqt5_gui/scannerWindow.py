# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scannerWindow.ui'
#
# Created by: PyQt5 UI code generator 5.12
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import os
import platform
import clamd
import requests
import time
import hashlib
from datetime import datetime
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox

VT_API_KEY = "a20a9a2e0ad35f4de6d19ea686b0096139efc441f67fa54a315c60b2b1da14a0"

class Ui_MalwareScanWindow(object):




    def __init__(self ):
        self.files_to_scan = []
        self.scan_path     = "/home/pi/shared"
        for dirpath, dirnames, files in os.walk(self.scan_path):
                    for file in files :
                        self.files_to_scan.append(os.path.join(dirpath, file))





    def virusScan(self, files_to_scan):
        files_results = []
        cd = clamd.ClamdUnixSocket()
        for file_to_scan in files_to_scan :
            scan_result = cd.scan(file_to_scan)
            if scan_result[file_to_scan][0] == "FOUND":
                files_results.append({'name' : file_to_scan, 'result' : "INFECTED"})
            else :
                hasher = hashlib.md5()
                with open(file_to_scan, 'rb') as afile:
                    buf = afile.read()
                    hasher.update(buf)
                    params = {'apikey': VT_API_KEY, 'resource': hasher.hexdigest()}
                    url = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params)
                    if url.status_code == 200 :
                        json_response = url.json()
                        response = int(json_response.get('response_code'))
                        if response == 0:
                            files_results.append({'name' : file_to_scan, 'result' : "NOT INFECTED"})
                        elif response == 1:
                            positives = int(json_response.get('positives'))
                            if positives == 0:
                                files_results.append({'name' : file_to_scan, 'result' : "NOT INFECTED"})
                            else:
                                files_results.append({'name' : file_to_scan, 'result' : "INFECTED"})
                        else:
                            files_results.append({'name' : file_to_scan, 'result' : " MAY BE NOT INFECTED"})
                    else :
                        files_results.append({'name' : file_to_scan, 'result' : "MAY BE NOT INFECTED"})
                
                
        return files_results

    def creation_date(self, path_to_file):
        if platform.system() == 'Windows':
            return os.path.getctime(path_to_file)
        else:
            stat = os.stat(path_to_file)
            try:
                return stat.st_birthtime
            except AttributeError:
                return stat.st_mtime

    def setColortoRow(self, table, rowIndex, color):
        for j in range(table.columnCount()):
            table.item(rowIndex, j).setBackground(color)


    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(500, 241)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.infoLabel = QtWidgets.QLabel(Form)
        self.infoLabel.setObjectName("infoLabel")
        self.verticalLayout.addWidget(self.infoLabel)
        self.filesTableWidget = QtWidgets.QTableWidget(Form)
        self.filesTableWidget.setObjectName("filesTableWidget")
        self.filesTableWidget.setColumnCount(3)
        self.filesTableWidget.setRowCount(len(self.files_to_scan))
        self.filesTableWidget.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.filesTableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        item = QtWidgets.QTableWidgetItem()
        self.filesTableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.filesTableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.filesTableWidget.setHorizontalHeaderItem(2, item)
        self.verticalLayout.addWidget(self.filesTableWidget)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.removeButton = QtWidgets.QPushButton(Form)
        self.removeButton.setObjectName("removeButton")
        self.horizontalLayout.addWidget(self.removeButton)
        self.refreshButton = QtWidgets.QPushButton(Form)
        self.refreshButton.setObjectName("refreshButton")
        self.horizontalLayout.addWidget(self.refreshButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout)

        files_scan_results = self.virusScan(self.files_to_scan)
        row_count    = 0

        for file_scan_results in files_scan_results :
            self.filesTableWidget.setItem(row_count,0, QtWidgets.QTableWidgetItem(datetime.utcfromtimestamp(self.creation_date(file_scan_results['name'])).strftime('%Y-%m-%d %H:%M:%S')))
            self.filesTableWidget.setItem(row_count,1, QtWidgets.QTableWidgetItem(file_scan_results['name']))
            self.filesTableWidget.setItem(row_count,2, QtWidgets.QTableWidgetItem(file_scan_results['result']))
            if file_scan_results['result'] == "INFECTED" :
                self.setColortoRow(self.filesTableWidget, row_count, QtGui.QColor(255, 80, 80))
            else :
                self.setColortoRow(self.filesTableWidget, row_count, QtGui.QColor(51, 204, 51))
            row_count += 1
        self.filesTableWidget.move(0, 0)
        self.filesTableWidget.resizeColumnsToContents()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Malware Scanner"))
        self.infoLabel.setText(_translate("Form", "Scanned files must be in the shared folder"))
        item = self.filesTableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Date"))
        item = self.filesTableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Name"))
        item = self.filesTableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Infected"))
        self.removeButton.setText(_translate("Form", "Remove file"))
        self.refreshButton.setText(_translate("Form", "Refresh"))

        self.refreshButton.clicked.connect(self.refreshClick)
        self.removeButton.clicked.connect(self.removeClick)



    def refreshClick(self):
        self.files_to_scan.clear()
        for dirpath, dirnames, files in os.walk(self.scan_path):
                    for file in files :
                        self.files_to_scan.append(os.path.join(dirpath, file))

        for i in reversed(range(self.filesTableWidget.rowCount())):
            self.filesTableWidget.removeRow(i)

        self.filesTableWidget.setColumnCount(3)
        self.filesTableWidget.setRowCount(len(self.files_to_scan))

        files_scan_results = self.virusScan(self.files_to_scan)
        row_count    = 0

        for file_scan_results in files_scan_results :
            self.filesTableWidget.setItem(row_count,0, QtWidgets.QTableWidgetItem(datetime.utcfromtimestamp(self.creation_date(file_scan_results['name'])).strftime('%Y-%m-%d %H:%M:%S')))
            self.filesTableWidget.setItem(row_count,1, QtWidgets.QTableWidgetItem(file_scan_results['name']))
            self.filesTableWidget.setItem(row_count,2, QtWidgets.QTableWidgetItem(file_scan_results['result']))
            if file_scan_results['result'] == "INFECTED" :
                self.setColortoRow(self.filesTableWidget, row_count, QtGui.QColor(255, 80, 80))
            else :
                self.setColortoRow(self.filesTableWidget, row_count, QtGui.QColor(51, 204, 51))
            row_count += 1
        self.filesTableWidget.move(0, 0)
        self.filesTableWidget.resizeColumnsToContents()


    def removeClick(self):
        name_index                = self.filesTableWidget.selectedIndexes()[1]
        name_remove_file          = self.filesTableWidget.model().data(name_index).rstrip()
        result_index              = self.filesTableWidget.selectedIndexes()[2]
        result_remove_file        = self.filesTableWidget.model().data(result_index).rstrip()
        
        if result_remove_file == "NOT INFECTED" :
            #QtWidgets.QMessageBox.about(self, "Warning", "Warning : This file is not infected. If you really want to delete it, do it by yourself.")
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText("Error")
            msgBox.setInformativeText('This file is not infected. If you really want to delete it, do it by yourself :P')
            msgBox.setWindowTitle("Innocent file")
            msgBox.exec_()
        else :
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Question)
            msgBox.setText("Do you really want to delete : " + name_remove_file)
            msgBox.setInformativeText("This action is irreversible")
            msgBox.setStandardButtons(QMessageBox.Yes| QMessageBox.No)
            msgBox.setDefaultButton(QMessageBox.No)
            reply = msgBox.exec_()
            if reply == QMessageBox.Yes:
                os.remove(name_remove_file)
                self.refreshClick()
            else:
                pass




