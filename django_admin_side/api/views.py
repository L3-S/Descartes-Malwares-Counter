from django.shortcuts import render, redirect
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.renderers import TemplateHTMLRenderer
from rest_framework import authentication, permissions
import shutil
import psutil
from .models import Extensions, Urls
from django.contrib import messages
from django.utils.translation import gettext as _
import subprocess




class DashBoardView(APIView):
	renderer_classes = [TemplateHTMLRenderer]
	template_name = 'api/index.html'

	def get(self, request, format='json'):
		if request.user.username:
			total_t, used_t, free_t = get_hd_infos()
			return Response({'total_t' : total_t, 'used_t' : used_t, 'free_t' : free_t})
		else:
			return redirect('/accounts/login/')



class MemCpuView(APIView):

	def get(self, request, format='json'):
		if request.user.username:
			mem_percent = psutil.virtual_memory()[2]
			cpu_percent = psutil.cpu_percent()

			return Response({'mem_percent' : mem_percent, 'cpu_percent' : cpu_percent})
		else:
			return redirect('/accounts/login/')

def get_hd_infos():
	total_r, used_r, free_r = shutil.disk_usage("/")
	total_h, used_h, free_h = shutil.disk_usage("/home")
	total_t = (total_h + total_r) // (2**30)
	used_t  = (used_h  + used_r) // (2**30)
	free_t  = (free_h  + free_r) // (2**30)
	return (total_t, used_t, free_t)



class StatsView(APIView):
	renderer_classes = [TemplateHTMLRenderer]
	template_name = 'api/stats.html'

	def get(self, request, format='json'):
		if request.user.username:
			return Response({})
		else:
			return redirect('/accounts/login/')


class BlacklistView(APIView):
	renderer_classes = [TemplateHTMLRenderer]
	template_name = 'api/blacklist.html'

	def get(self, request, format='json'):
		if request.user.username:
			url_objs = Urls.objects.all()
			return Response({'url_objs' : url_objs})
		else:
			return redirect('/accounts/login/')

	def post(self, request, format='json'):
		if request.user.username:
			if(request.POST.get("action") == "delete"):
				url_id = request.POST.get("id")
				Urls.objects.get(id=url_id).delete()
				delete_message = _("URL supprimée... redémarrage du server")
				messages.add_message(request, messages.SUCCESS, delete_message)
			if(request.POST.get("action") == "add"):
				obj_url        = request.POST.get("url")
				obj_description = request.POST.get("desc")
				Urls.objects.create(url=obj_url, description=obj_description)
				add_message = _("URL bloquée... redémarrage du server") 
				messages.add_message(request, messages.SUCCESS, add_message )
			url_objs = Urls.objects.all()
			url_file = open('/home/pi/admin_side/conf_files/custom_urls', 'w')
			for url_obj in url_objs :
				url_file.write(url_obj.url+'\n')
			url_file.close()
			subprocess.call("/home/pi/scripts/squidGuard_update.sh")
			return Response({'url_objs' : url_objs})
		else:
			return redirect('/accounts/login/')


class ExtensionsView(APIView):
	renderer_classes = [TemplateHTMLRenderer]
	template_name = 'api/extensions.html'

	def get(self, request, format='json'):
		if request.user.username:
			extensions_objs = Extensions.objects.all()
			return Response({'extensions' : extensions_objs})
		else:
			return redirect('/accounts/login/')


	def post(self, request, format='json'):
		if request.user.username:
			if(request.POST.get("action") == "delete"):
				obj_id = request.POST.get("id")
				Extensions.objects.get(id=obj_id).delete()
				delete_message = _("Extension supprimée") 
				messages.add_message(request, messages.WARNING, delete_message )
			if(request.POST.get("action") == "add"):
				obj_name        = request.POST.get("name")
				if obj_name[0] != '.':
					obj_name = '.'+ obj_name
				obj_description = request.POST.get("description")
				Extensions.objects.create(name=obj_name, description=obj_description)
				add_message = _("Extension ajoutée") 
				messages.add_message(request, messages.SUCCESS, add_message )

			extensions_objs = Extensions.objects.all()
			extensions_file = open('/home/pi/admin_side/conf_files/extensions', 'w')
			for extensions_obj in extensions_objs :
				extensions_file.write(extensions_obj.name+':')


			return Response({'extensions' : extensions_objs})
		else:
			return redirect('/accounts/login/')	


class TimingView(APIView):
	renderer_classes = [TemplateHTMLRenderer]
	template_name = 'api/timing.html'

	def get(self, request, format='json'):
		if request.user.username:
			return Response({})
		else:
			return redirect('/accounts/login/')	
